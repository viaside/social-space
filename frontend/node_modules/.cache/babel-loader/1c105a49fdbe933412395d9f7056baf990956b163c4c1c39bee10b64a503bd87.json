{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\social-space\\\\frontend\\\\src\\\\component\\\\Group\\\\GroupList.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { open } from '../../features/redux/openChatSlice';\nimport { close } from '../../features/redux/openMessageSlice';\nimport { setIdChat } from '../../features/redux/idChatSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GroupList(props) {\n  _s();\n  // redux\n  const dispatch = useDispatch();\n\n  // group array\n  let group = [];\n\n  // set group array\n  if (props.data) {\n    props.data.sort(function (a, b) {\n      // sort by data\n      if (a.date < b.date) {\n        return 1;\n      }\n      if (a.date > b.date) {\n        return -1;\n      }\n      return 0;\n    }).forEach(element => {\n      if (element.type === \"group\" || element.type === \"supergroup\") {\n        group.push(element.nameFrom);\n      }\n    });\n  }\n\n  // group selection\n  const activeGroup = async id => {\n    for (let i = 0; i <= group.length; i++) {\n      // group html elelement\n      let element = await document.getElementById(i);\n\n      // group message html element\n      let elementMessage = await document.getElementById(\"message\" + i);\n      if (element) {\n        if (id === i) {\n          // set style active group\n          element.style.backgroundColor = \"#353535\";\n        } else {\n          // clear style  other group\n          element.style.backgroundColor = null;\n        }\n      }\n      if (elementMessage) {\n        // clear style group message \n        elementMessage.style.backgroundColor = null;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"GroupListAll\",\n    children: group.filter((element, index) => {\n      return group.indexOf(element) === index;\n    }).map((data, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GroupList\",\n        id: index,\n        onClick: () => {\n          dispatch(open());\n          dispatch(close());\n          dispatch(setIdChat(data));\n          activeGroup(index);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s(GroupList, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c = GroupList;\nvar _c;\n$RefreshReg$(_c, \"GroupList\");","map":{"version":3,"names":["React","useDispatch","open","close","setIdChat","jsxDEV","_jsxDEV","GroupList","props","_s","dispatch","group","data","sort","a","b","date","forEach","element","type","push","nameFrom","activeGroup","id","i","length","document","getElementById","elementMessage","style","backgroundColor","className","children","filter","index","indexOf","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Проекты/social-space/frontend/src/component/Group/GroupList.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { open } from '../../features/redux/openChatSlice';\r\nimport { close } from '../../features/redux/openMessageSlice';\r\nimport { setIdChat } from '../../features/redux/idChatSlice';\r\n\r\nexport default function GroupList(props) {\r\n    // redux\r\n    const dispatch = useDispatch()\r\n  \r\n    // group array\r\n    let group = [];\r\n\r\n    // set group array\r\n    if(props.data){\r\n        props.data.sort(function(a,b){\r\n            // sort by data\r\n            if(a.date < b.date){\r\n                return 1;\r\n            }\r\n            if(a.date > b.date){\r\n                return -1;\r\n            }\r\n            return 0;\r\n            }).forEach(element => {\r\n                if(element.type === \"group\" || element.type === \"supergroup\"){\r\n                    group.push(element.nameFrom);\r\n                }\r\n        });\r\n    }\r\n\r\n    // group selection\r\n    const activeGroup = async (id) => {\r\n        for(let i = 0; i <= group.length; i++){\r\n            // group html elelement\r\n            let element = await document.getElementById(i);\r\n\r\n            // group message html element\r\n            let elementMessage = await document.getElementById(\"message\"+i);\r\n\r\n            if(element){\r\n                if(id === i){\r\n                    // set style active group\r\n                    element.style.backgroundColor = \"#353535\";\r\n                } else{\r\n                    // clear style  other group\r\n                    element.style.backgroundColor = null;\r\n                }\r\n            }\r\n            if(elementMessage){\r\n                // clear style group message \r\n                elementMessage.style.backgroundColor = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='GroupListAll'>\r\n            {group.filter((element, index) => {\r\n                return group.indexOf(element) === index;\r\n            }).map((data, index) => {\r\n                return (\r\n                    <div className=\"GroupList\" id={index} key={index}  onClick = {() => {\r\n                        dispatch(open());\r\n                        dispatch(close());\r\n                        dispatch(setIdChat(data));\r\n                        activeGroup(index);\r\n                    }}>\r\n                        <h1>{ data }</h1>\r\n                    </div>\r\n                ); \r\n            })}\r\n        </div>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\social-space\\\\frontend\\\\src\\\\component\\\\Group\\\\GroupOpenMessage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { open } from '../../features/redux/openMessageSlice';\nimport { setMessageChat } from '../../features/redux/idMessageSlice';\nimport convertDate from '../../features/convertDate';\nimport packagejson from '../../../package.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GroupOpenMessage(props) {\n  _s();\n  const openChat = useSelector(state => state.openChat.value);\n  const idChat = useSelector(state => state.idChat.value);\n  const dispatch = useDispatch();\n  let Message = [];\n\n  // set message array\n  if (props.data != null) {\n    props.data.sort(function (a, b) {\n      // sort by date\n      if (a.date < b.date) {\n        return 1;\n      }\n      if (a.date > b.date) {\n        return -1;\n      }\n      return 0;\n    }).forEach(element => {\n      if (element.type === \"group\" && element.nameFrom === idChat || element.type === \"supergroup\" && element.nameFrom === idChat) {\n        // image presence check\n        if (element.text !== null) {\n          let data = [element.text, convertDate(element.date), element.chatId, element.messageId, element.username, element.answers, element.comments, element.userAvatar, element.textPhoto, element.isCheck];\n          Message.push(data);\n        } else {\n          let data = [\"*Изображение\", convertDate(element.date), element.chatId, element.messageId, element.username, element.answers, element.comments, element.userAvatar, element.textPhoto, element.isCheck];\n          Message.push(data);\n        }\n      }\n    });\n  }\n\n  // message selection\n  const activeMessage = async (id, messageId) => {\n    // marks that messages have been viewed \n    fetch(packagejson.ipurl + '/api/telegram/CheckMessage/' + messageId).then(Response => Response.json()).then(Result => {\n      console.log(Result);\n    });\n    for (let i = 0; i <= Message.length; i++) {\n      let element = document.getElementById(\"message\" + i);\n      if (element) {\n        if (id === \"message\" + i) {\n          element.style.backgroundColor = \"#353535\";\n        } else {\n          element.style.backgroundColor = null;\n        }\n      }\n    }\n  };\n  if (openChat === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatListAll\",\n      children: Message.filter((element, index) => {\n        return Message.indexOf(element) === index;\n      }).map((data, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ChatList\",\n          id: \"message\" + index,\n          onClick: () => {\n            dispatch(open());\n            dispatch(setMessageChat(data[3]));\n            activeMessage(\"message\" + index, data[3]);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"avatar\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"data:image/jpeg;base64,\" + data[7],\n              alt: \"avatar\",\n              width: 70\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"userName\",\n              children: data[4]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"lastMessage\",\n                children: data[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 33\n              }, this), data[9] ? null : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"messageMarker\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  } else {\n    return null;\n  }\n}\n_s(GroupOpenMessage, \"Lsz7ARPB4QsepvW16gY/PlSINp0=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c = GroupOpenMessage;\nvar _c;\n$RefreshReg$(_c, \"GroupOpenMessage\");","map":{"version":3,"names":["React","useSelector","useDispatch","open","setMessageChat","convertDate","packagejson","jsxDEV","_jsxDEV","GroupOpenMessage","props","_s","openChat","state","value","idChat","dispatch","Message","data","sort","a","b","date","forEach","element","type","nameFrom","text","chatId","messageId","username","answers","comments","userAvatar","textPhoto","isCheck","push","activeMessage","id","fetch","ipurl","then","Response","json","Result","console","log","i","length","document","getElementById","style","backgroundColor","className","children","filter","index","indexOf","map","onClick","src","alt","width","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","_c","$RefreshReg$"],"sources":["D:/Проекты/social-space/frontend/src/component/Group/GroupOpenMessage.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { open } from '../../features/redux/openMessageSlice';\r\nimport { setMessageChat } from '../../features/redux/idMessageSlice';\r\nimport convertDate from '../../features/convertDate';\r\nimport packagejson from '../../../package.json';\r\n\r\nexport default function GroupOpenMessage(props) {\r\n    const openChat = useSelector((state) => state.openChat.value)\r\n    const idChat = useSelector((state) => state.idChat.value)\r\n    const dispatch = useDispatch()\r\n  \r\n    let Message = [];\r\n\r\n    // set message array\r\n    if(props.data != null){\r\n        props.data.sort(function(a,b){\r\n            // sort by date\r\n            if(a.date < b.date){\r\n                return 1;\r\n            }\r\n            if(a.date > b.date){\r\n                return -1;\r\n            }\r\n            return 0;\r\n            }).forEach(element => {\r\n                if((element.type === \"group\" && element.nameFrom === idChat) || (element.type === \"supergroup\" && element.nameFrom === idChat)){\r\n                    // image presence check\r\n                    if(element.text !== null){\r\n                        let data = [element.text, convertDate(element.date), element.chatId, element.messageId, element.username, element.answers, element.comments, element.userAvatar, element.textPhoto, element.isCheck];\r\n                        Message.push(data);\r\n                    } else{\r\n                        let data = [\"*Изображение\", convertDate(element.date), element.chatId, element.messageId, element.username, element.answers, element.comments, element.userAvatar, element.textPhoto, element.isCheck];\r\n                        Message.push(data);\r\n                    }\r\n                }\r\n        });\r\n    }\r\n\r\n    // message selection\r\n    const activeMessage = async (id, messageId) => {\r\n\r\n        // marks that messages have been viewed \r\n        fetch(packagejson.ipurl + '/api/telegram/CheckMessage/' + messageId)\r\n        .then((Response) => Response.json())\r\n        .then((Result) => {\r\n            console.log(Result);\r\n        });\r\n\r\n        for(let i = 0; i <= Message.length; i++){\r\n            let element = document.getElementById(\"message\"+i);\r\n            if(element){\r\n                if(id === \"message\"+i){\r\n                    element.style.backgroundColor = \"#353535\";\r\n                } else{\r\n                    element.style.backgroundColor = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if(openChat === true){\r\n        return(\r\n            <div className='ChatListAll'>\r\n            {Message.filter((element, index) => {\r\n                return Message.indexOf(element) === index;\r\n            }).map((data, index) => {\r\n                return (\r\n                    <div className=\"ChatList\" id={\"message\"+index} key = {index} onClick = {() => {\r\n                        dispatch(open());\r\n                        dispatch(setMessageChat(data[3]));\r\n                        activeMessage(\"message\"+index, data[3])\r\n                    }}>\r\n                        <div className='avatar'>\r\n                            <img src={ \"data:image/jpeg;base64,\" + data[7] } alt=\"avatar\" width={70}/>\r\n                        </div>\r\n                        <div className='text'>\r\n                            <p className='userName'>{ data[4] }</p>\r\n                            <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                <p className='lastMessage'>{ data[0] }</p>\r\n                                {data[9]?null : <p className='messageMarker'></p>}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) \r\n            }\r\n            )}\r\n            </div>\r\n        );\r\n    } else{\r\n        return null    \r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
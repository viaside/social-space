{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\\\\social space\\\\frontend\\\\src\\\\component\\\\Channel\\\\ChannelOpen.jsx\",\n  _s = $RefreshSig$();\nimport convertDate from \"../../features/convertDate\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { close } from '../../features/redux/openMessageSlice';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChannelOpen(props) {\n  _s();\n  const openMessage = useSelector(state => state.openMessage.value);\n  const idMessage = useSelector(state => state.idMessage.value);\n  const dispatch = useDispatch();\n  const [Answer, setAnswer] = useState();\n  const [Comment, setComment] = useState();\n  let message = [];\n  if (props.data != null) {\n    props.data.forEach(element => {\n      if (element.messageId === idMessage && (element.type === \"channel\" || element.type === \"superchannel\")) {\n        let data = [element.text, convertDate(element.date), element.chatId, element.messageId, element.username, element.answers, element.comments];\n        message.push(data);\n      }\n    });\n  }\n  const sendMessage = () => {\n    fetch(\"https://localhost:7013/api/telegram/sendMessage/\" + message[0][2] + \"&\" + Answer + \"&\" + message[0][3]);\n  };\n  const sendComment = () => {\n    fetch(\"https://localhost:7013/api/telegram/AddComment/\" + message[0][3] + \"&\" + Comment);\n  };\n  const textHandlerAnswer = event => {\n    setAnswer(event.target.value);\n  };\n  const textHandlerComent = event => {\n    setComment(event.target.value);\n  };\n  if (openMessage === false) {\n    return null;\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"OpenChat\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041E\\u0442: \", message[0][4]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0421\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u044F: \", message[0][0]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0412\\u0440\\u0435\\u043C\\u044F: \", message[0][1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u041E\\u0442\\u0432\\u0435\\u0442\\u044B:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), message[0][5] != undefined ? message[0][5].reverse().map(answer => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text\",\n            children: answer.split(\"/\")[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"time\",\n            children: answer.split(\"/\")[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u041E\\u0442\\u0432\\u0435\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: event => textHandlerAnswer(event),\n        name: \"message\",\n        id: \"message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMessage(),\n        children: \"\\u041E\\u0442\\u0432\\u0435\\u0442\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u041A\\u043E\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0438:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), message[0][6] != undefined ? message[0][6].reverse().map(comments => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text\",\n            children: comments.split(\"/\")[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"time\",\n            children: comments.split(\"/\")[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u041A\\u043E\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439 \\u043D\\u0435\\u0442\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: event => textHandlerComent(event),\n        name: \"message\",\n        id: \"message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendComment(),\n        children: \"\\u041D\\u0430\\u043F\\u0438\\u0441\\u0430\\u0442\\u044C \\u043A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(close()),\n        children: \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n}\n_s(ChannelOpen, \"Un96nYQ5FJjpfgQ8+orx5pvFqgM=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c = ChannelOpen;\nvar _c;\n$RefreshReg$(_c, \"ChannelOpen\");","map":{"version":3,"names":["convertDate","useSelector","useDispatch","close","useState","ChannelOpen","props","openMessage","state","value","idMessage","dispatch","Answer","setAnswer","Comment","setComment","message","data","forEach","element","messageId","type","text","date","chatId","username","answers","comments","push","sendMessage","fetch","sendComment","textHandlerAnswer","event","target","textHandlerComent","undefined","reverse","map","answer","split"],"sources":["D:/Проекты/social space/frontend/src/component/Channel/ChannelOpen.jsx"],"sourcesContent":["import convertDate from \"../../features/convertDate\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { close } from '../../features/redux/openMessageSlice';\nimport { useState } from \"react\";\n\nexport default function ChannelOpen(props) {\n    const openMessage = useSelector((state) => state.openMessage.value)\n    const idMessage = useSelector((state) => state.idMessage.value)\n    const dispatch = useDispatch()\n    const [Answer, setAnswer] = useState();\n    const [Comment, setComment] = useState();\n\n    let message = [];\n\n    if(props.data != null){\n        props.data.forEach(element => {\n            if(element.messageId === idMessage && (element.type === \"channel\" || element.type === \"superchannel\")){\n                let data = [element.text, convertDate(element.date), element.chatId, element.messageId, element.username, element.answers, element.comments];\n                message.push(data);\n            }\n        });\n\n    }\n\n    const sendMessage = () => {\n        fetch(\"https://localhost:7013/api/telegram/sendMessage/\" + message[0][2] + \"&\" + Answer + \"&\" + message[0][3]);\n    }\n\n    const sendComment = () => {\n        fetch(\"https://localhost:7013/api/telegram/AddComment/\" + message[0][3] + \"&\" + Comment);\n    }\n\n    const textHandlerAnswer = (event) => {\n        setAnswer(event.target.value);\n    }\n\n    const textHandlerComent = (event) => {\n        setComment(event.target.value);\n    }\n\n    if(openMessage === false){\n        return null\n    } else{\n        return(\n            <div className = \"OpenChat\">   \n                <p>От: { message[0][4] }</p>\n                <p>Сообщения: { message[0][0] }</p>\n                <p>Время: { message[0][1] }</p>\n                <p>Ответы:</p>\n                    { message[0][5] != undefined ? message[0][5].reverse().map((answer) => {\n                        return(\n                            <div>\n                                <p className = \"text\">{ answer.split(\"/\")[0] }</p>\n                                <p className = \"time\">{ answer.split(\"/\")[1] }</p> \n                            </div>\n                        )\n                    }) : <p>Ответов нету</p>}\n                <textarea onChange={(event) => textHandlerAnswer(event) } name=\"message\" id=\"message\"></textarea>\n                <button onClick={() => sendMessage()}>Ответить</button>\n                <p>Коментарии:</p>\n                    { message[0][6] != undefined ? message[0][6].reverse().map((comments) => {\n                        return(\n                            <div>\n                                <p className = \"text\">{ comments.split(\"/\")[0] }</p>\n                                <p className = \"time\">{ comments.split(\"/\")[1] }</p> \n                            </div>\n                        )\n                    }) : <p>Коментарий нету</p>}\n                <textarea onChange={(event) => textHandlerComent(event) } name=\"message\" id=\"message\"></textarea>\n                <button onClick={() => sendComment()}>Написать комментарий</button>\n                <button onClick={() => dispatch(close())}>Закрыть</button>\n            </div>\n        );\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}